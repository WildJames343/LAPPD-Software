#!/usr/bin/env python
# Fit a double gaussian to a PSEC logfile

import plot_PSEC4 as plt
import read_PSEC as psec

import numpy as np
import matplotlib.pyplot as mpl
import os
from Tkinter import *
import tkFileDialog
import tkMessageBox
import bokeh.plotting as bkh
from scipy import optimize
from bokeh.models import Span

# Toggle plotting
plot = 0

def chisquare(fobs, fgen):
    chi = 0.0
    k = 0.
    for obs, gen in zip(fobs, fgen):
        if obs == 0 or gen == 0:
            continue
        chi += (float(obs)-float(gen))**2/float(abs(obs))
        k += 1.
    return chi/k

# Model gaussian
def gaussian(x, height, center, width):
    return height*np.exp(-(x - center)**2/(2*width**2))

# Model double Gaussian
def two_gaussians(x, h1, c1, w1, h2, c2, w2, offset=0):
    return (gaussian(x, h1, c1, w1) +
        gaussian(x, h2, c2, w2) + offset)

cwd = os.getcwd()
# Get the data file from a dialogue box and open it. Also store the filename.
root = Tk()
root.withdraw()
root.update()
f = tkFileDialog.askopenfile(mode='rb', 
    initialfile=cwd, 
    title='Select a file', 
    filetypes = (("TXT Files", "*.txt"),("all files","*.*")))
root.destroy()
try:
    fname = f.name
except:
    print("No file selected")
    exit()
f.close()

# Get the data
big_ts, samples = psec.read(fname)

#Make a maller version of ts to use for individual samples
ts = np.arange(0.0, 25.6, 0.1)

ch = raw_input("What channel on the PSEC? (1-6): ")
# Convert from human format to computer format
ch = int(ch)-1

position = float(raw_input("What position on the tile are we at (cm): "))/100.

# Initialise list of velocities
electronVelocities = []
# Initialise a dict of time differences. These get tied to the sample number.
time_differences = {}

if plot:
    # -- Boleh Fiddling -- #
    # Set up write file
    oname = fname.replace('.txt', '.html')
    ofile = bkh.output_file(fname.replace('.txt', '.html'), title=fname)

    # Create figure
    title = fname.split('/')[-1][:-5]
    # Data
    p   = bkh.figure(plot_width=1000, title=title+' Signal', 
        x_axis_label='t-t0, ns', y_axis_label='Voltage, mV', )

    big_volts = []
    all_gaussians = []
    all_guesses = []


# Chisq error function
errfunc = lambda p, x, y: (two_gaussians(x, *p) - y)**2

for key, sample in samples.iteritems():
    ## Fit a double gaussian to the data ##
    volts = sample[ch,:]

    # Guess the locations of the gaussians
    halfmax_volt = 0.5 * np.amin(volts)
    halfmax_t1 = np.argmax(volts<halfmax_volt)
    halfmax_t1 = ts[halfmax_t1]

    halfmax_t2 = np.argmax(volts[::-1] < halfmax_volt)
    halfmax_t2 = ts[-1*halfmax_t2]

           #   h1,   c1,   w1]
    guess = [halfmax_volt, halfmax_t1, 0.1,
            halfmax_volt, halfmax_t2, 0.1,
            np.mean(sample[2,:]) ] # y offset

    # Optimise gaussian fit
    optim, success = optimize.leastsq(errfunc, guess[:], args=(ts, volts))

    # Get the time differences
    time_difference = abs(optim[4]-optim[1])*1e-9 # Convert s to ns
    time_differences[key] = time_difference

    # Calculate the velocity, store it
    velocity = 2*(0.06-position)/(time_difference)
    if velocity < 3e8:
        electronVelocities.append(velocity)

    # chisq = chisquare(volts, two_gaussians(ts, *optim))
    # print("t0: %.2lf\ndt: %2.2g\nVelocity: %2.2g\nchisq: %lf\n---------------" %
        # (25.6*int(key), time_difference, velocity, chisq))

    if plot:
        big_volts.append(volts)
        all_gaussians.append(two_gaussians(ts, *optim))
        all_guesses.append(two_gaussians(ts, *guess))


if plot:
    big_volts = np.array(big_volts).flatten()
    all_gaussians = np.array(all_gaussians).flatten()
    all_guesses = np.array(all_guesses).flatten()
    p.line(x=big_ts,
            y=big_volts,
            color='red',
            legend='Data',
            line_width=1)
    
    p.line(big_ts, 
            all_gaussians,
            line_width=1,
            color='black',
            legend='Gaussians Fits')

    p.line(big_ts, 
            all_guesses,
            line_width=1,
            color='purple',
            legend='Gaussians guesses')

    # Plot vertical lines at the boundaries between the samples
    vlines = []
    for i in range(len(samples)):
        vlines.append(Span(location=25.6*i,
                            dimension='height',
                            line_color='cyan',
                            line_width=2,
                            line_alpha=0.5
                            ))
    p.renderers.extend(vlines)

    # Make data toggleable
    p.legend.location = "top_left"
    p.legend.click_policy="hide"

    bkh.save(p)
    bkh.show(p)


# time_differences_ps = [i*1e12 for i in list(time_differences.values()) if i < 1e-9]
# for i in time_differences_ps:
#     print("%.2lfps" % i)

# mpl.hist(time_differences_ps)
# mpl.show()

# I like numpy
electronVelocities = np.array(electronVelocities)

# Mean, error, max
meanVelocity = np.mean(electronVelocities)
devVelocity  = np.std(electronVelocities)
maxVelocity  = np.amax(electronVelocities)

print("From %d files, we have a max velocity of %.2gm/s, a mean velocity of %.2gm/s, and a standard deviation of %.2gm/s." 
    % (len(electronVelocities), maxVelocity, meanVelocity, devVelocity))

mpl.hist(electronVelocities)
mpl.title(fname.split('/')[-1]+' velocities')
mpl.xlabel('Velocity')
mpl.ylabel('Frequency')
oname = fname.replace('.txt', '')
# mpl.savefig(oname)
mpl.tight_layout()
mpl.show()