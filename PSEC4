#!/usr/bin/env python
import matplotlib.pyplot as plt
import bokeh.plotting as bkh
import os
import datetime
import subprocess

### FILEPATH TO PSEC4 CODE DIRECTORY!!! SET THIS!!!!!! ###
# DIR = '/home/wizenedchimp/Documents/LAPPD-Project/run-psec4-master'

def find(name, path):
    result = ''
    for root, dirs, files in os.walk(path):
        if name in files:
            result = os.path.join(root, name)
            break
    return result

try:
	DIR
except:
	print 'PSEC directory not set! Attempting to search for it...'
	DIR = find('TakePed', '/home')[:-12]
	print DIR

os.chdir(DIR)

oname = raw_input('Please enter a filename (blank for automatic):')
if oname == '':
	t = datetime.datetime.now()
	oname = 'sample_'+str(t.year)+'-'+str(t.month)+'-'+str(t.day)+'_'+str(t.hour)+'h'+str(t.minute)+'m'

# Check if the DATA and FIGS paths exist, and if not create them.
if not os.path.exists('/DATA/'):
	print 'DATA directory not found. Creating a folder...'
	os.makedirs('./DATA/')
if not os.path.exists('/FIGS/'):
	print 'FIGS directory not found. Creating a folder...'
	os.makedirs('./FIGS/')


print 'Writing to %s.txt' % oname
N = ''
i = 0
while type(N) != int:
	N = raw_input('Please enter the number of samples you want to take: ')
	try:
		N = int(N)
	except:
		print "That's not a number!"
		i += 1
		if i > 2:
			print '...Why are you like this'
		print '\n'

# Ask the PSEC to read the thing, and store it in DATA with the name we want
command = ['/bin/LogData', './DATA/'+str(oname), str(N), '0']
psec = subprocess.Popen(command)
psec.wait()

# If we can't find the file after the PSEC is done, exit
if not os.path.isfile(oname+'.txt'):
	print 'Unable to find %s.txt! Stopping...' % oname
	exit()

# Samples is a list, and each sample contains
#  a set of 6 lists which are the channels readings
samples = []
channels = [[],[],[],[],[],[],[]]
j = 0
with open(oname+'.txt', 'r') as f:
	for line in f:
		# Skip over header lines
		if line[0] == '#':
			continue
		else:
			line = line.split()
			for i in range(6):
				channels[i+1].append(line[i])
			channels[0].append(j)
			j += 1
		if j%256 == 0:
			samples.append(channels)
			channels = [[],[],[],[],[],[],[]]
print 'Read out %d samples, in %d lines' % (len(samples), j)

# output graph to a static HTML file
bkh.output_file(oname+'.html')

#create plot object
p = bkh.figure(plot_width=1000, title=oname, x_axis_label='N', y_axis_label='Voltage, V')

# Plot data
col = ['red', 'blue', 'orange', 'green', 'purple', 'black']
for sample in samples:
	i = 0
	for channel in sample[1:]:
		i+=1
		p.line(sample[0], channel, legend='Channel '+str(i), line_width=1, line_color=col[i-1])

# set ranges
p.y_range = Range1d(1.1*vmin, 1.1*vmax)

bkh.save(p)